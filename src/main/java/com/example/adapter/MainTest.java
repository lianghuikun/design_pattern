package com.example.adapter;

/**
 * 结构型模式：
 *  核心作用：是从程序的接口上实现松耦合，从而可以扩大整体
 *  的类结构，用来解决更大的问题。
 *  便于维护。
 * 适配器模式：
 *  什么是适配器模式？
 *      将一个类的接口转换为客户希望的另一个接口，adapter模式
 *      使得原本由于接口不兼容而不能一起工作的哪些类可以在一起工作
 *  模式中的角色：
 *      目标接口(Target):客户锁期望的接口，目标可以是具体的或抽象的类，也可以是接口
 *      需要适配的类(Adaptee):需要适配的类或适配者类
 *      适配器(adapter):通过包装一个需要适配的对象，把原接口转换成目标接口
 *  工作中的场景：
 *      经常用来做旧系统改造和升级
 *      如果我们的系统开发之后不需要在维护了，那么很多模式都是没必要的，
 *      但是不幸的是，事实却是维护一个系统的代价往往是开发一个系统的数倍
 *  我们学习中见过的场景：
 *      java.io.InputStreamReader(InputeStream)
 *      java.io.OutputStreamWriteer(OutputStream)
 */
// 客户端，相当于USB接口
public class MainTest {
}
